---
layout: post
title: "Pairing!"
date: 2014-07-29
---

This past week I got the opportunity to pair with LaToya as we work alongside the London apprentices on one of Mike's Java training courses. 

One of the most interesting parts of pairing is that you get an alternative perspective on every change you make. In addition I've been able to share some of the Java knowledge I have! This morning coming into our meeting with Mike I noticed that I had already filled Latoya in on some of the topics we were being briefed on! 

While I was able to provide quite a bit of differences between Ruby and Java, LaToya helped bring to light some abstraction ideas that I should be utilizing more often. One example is breaking up logic. While overriding Java's equals method we came up with: 

{% highlight Java %}
@Override
public boolean equals(Object o){
	if(!(o instanceof Ledger))
		return false;
	else{
		Ledger ledger = (Ledger) o;
		return isEqual(ledger);
	}
}
	
private boolean isEqual(Ledger ledger){
	return isEqualBalance(ledger.getBalance()) && isEqualList(ledger.getTransactionList());
}
	
private boolean isEqualBalance(int balance) {
	return balance == this.balance;		
}
	
private boolean isEqualList(LinkedList<Transaction> transactionList){
	return transactionList.equals(this.transactionList);
}
{% endhighlight %}

I would have probably simply written this:

{% highlight Java %}
@Override
public boolean equals(Object o){
	if(!(o instanceof Ledger))
		return false;
	else{
		Ledger ledger = (Ledger) o;
		return (ledger.getBalance() == this.balance) && (ledger.getTransactionList().equals(this.transactionList));
	}
}
{% endhighlight %}

However, this function violates the OCP (Open Closed Principal). If I were to add an date another field this function would have to change. Keeping those values `private` and abstracting them away from the implementation makes your code more adaptable to change and adds some additional clarity. Thanks LaToya! 
