---
layout: post
title: "TDD and static typed languages?"
date: 2014-07-15
---

When I first started learning TDD and how to write tests in general I immediately recknognized how powerful the methodology would be for dynamically typed languages. A video in the Clean Coder series confirmed that TDD was a reaction to provide more safety to dynamic languages (specifically by Smalltalk coders that wanted Smalltalk to be the language of the web). After working with the methodology for some time now, I'm starting to make some cool observations about some habits I'd made before coming to 8th Light.

While working in Python I'd often test new functions in the interpretter before commiting them to code. This was a good way to explore the language and provided some assurance that I was getting the return values I desired. Looking back I should have thrown those values in a test and exploited TDD's wonderful ability to assist refactoring code. 

That being said, while working in Clojure and Ruby while practicing TDD I'd follow a simular methodology. I'd figure out what I wanted. Write a preliminary test and then play with the interpretter til I could pass that test. At that point I'd simply copy it in, run the test, go green, and refactor if need be. However my current project is in Java, which has no REPL-like interpretter. 

I faced some set backs. This was mostly because I wanted to fill my projects weekly requirements, however in the end I spent more time tracking down what was going wrong. Here are some things I've learned. (1) I should have simply taken the time in the first place to figure out how I could test  functions that relied heavily on abstract datatypes and IO streams. (2) Wow test-specific subclass pattern (made a post on this specifically) has really helped me testing file operations. Abstract types can be a pain to deal with writing tests up front. Additionally I'd prefer that my tests were portable. By overloading the functionality I require on a per test level, I get a lot of flexibility. Overall I like this pattern a lot better than writing a fake or mock class. (3) WOW now its really easy to change. I was able to eliminate 255 lines of code and a good portion of what I added had to do with getting better test coverage! 

Anyway, I ran some cob spec tests today out of curiosity. All the features I've implemented so far are passing, and the cob spec doesn't seem so daunting now! 