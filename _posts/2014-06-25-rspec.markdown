---
layout: post
title: "RSpec Woes and Solutions!"
date: 2014-06-25
---

While working on my version of Ruby tic tac toe I had difficulty figuring out how to test some functionality of my program. One case was the possibility of two or more "correct" moves to block an opponent from forking the board, the other was testing input output. Luckily with the help from some craftsmen at 8th Light I was able to figure out an approach to testing that functionality. 

Mark provided advice to deal with the possibility of more than one location in the board being correct. This situation was problematic because as the minimax function was altered, it would sometimes choose a spot that was technically correct, but not the location that my test was looking for. This resulted in failing tests and rendered these tests invalid. The solution was to define an array of correct moves and to assert the function call. The RSpec documentation denotes this as the `include` matcher, that page can be found [here][shouldinc]. In this example, the AI needs to make a choice this turn to block a fork, but there are three possibilities that could result in a successful block. I have provided an example below. 

{% highlight Ruby %}
  it "another fork" do
    board = ["x", "o", "x",
             "-", "-", "-",
             "-", "-", "-"]
    a.smart_move(board)
    [4, 6, 8].should include(a.choice)
  end 
{% endhighlight %}

To deal with the problem of testing input and output, Myles suggested that creating IO helper classes. While working on this problem I had numerous suggestions for testing I/O. Some people suggested using StringIO, other suggested creating mocks, stubs, or a fake, and some people suggested not to bother testing that functionality. I came up with the following. Since I named the class IoFake, lets call it a "fake."

{% highlight Ruby %}
class IoFake
  def initialize(some_input = "")
    @some_input = some_input
  end

  def output(text)
    text
  end

  def input
    @some_input
  end
end

class IoProd
  def output(text)
    puts text
  end

  def input
    gets.chomp
  end
end
{% endhighlight %}

Each class is passed into the constructor of my console class depending on the context. This is an example of polymorphism and the strategy pattern. In the case where input needs to be tested, simply create a new class instance of IoFake, pass the input in the constructor, when input is called in the function body it will take the variable provided by the constructor. While in production, the input function simply calls the chomp method which takes the input from the user. The algorithms are interchangeable depending on the context, input can be called in both testing and production. By utilizing the strategy pattern, dependance inversion principal is also fulfilled in regards to input and output. In addition to making the module more testable, switching out interfaces (ex html) would be less challenging as well. 

[shouldinc]: https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/include-matcher
